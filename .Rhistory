sd_tracts@data %>% head
sd_tracts@data$NAME[sd_tracts@data$median_income == min(sd_tracts@data$median_income)]
sd_tracts@data$NAME[sd_tracts@data$median_income == max(sd_tracts@data$median_income)]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sp)
library(ggmap)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55 ,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sd_tracts@proj4string
sd_tracts@data$NAME[sd_tracts@data$median_income == min(sd_tracts@data$median_income)]
sd_tracts@data$NAME[sd_tracts@data$median_income == max(sd_tracts@data$median_income)]
knitr::opts_chunk$set(echo = TRUE)
setwd(here::here())
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
getwd()
getwd()
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
?knitr::knit
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
knitr::opts_knit$set(root.dir = here::here())
# coordinates(sites_ll) <- c("lng", "lat")
# proj4string(sites_ll) <- CRS("+proj=longlat")
# sites <- spTransform(sites_ll, proj4string(sd_city))
getwd()
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_knit$set(root.dir = here::here())
# setwd(here::here())
# load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
knitr::opts_knit$set(here::here())
knitr::opts_knit$set(here::here())
# setwd(here::here())
# load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
knitr::opts_knit$get()
knitr::opts_knit$get()
knitr::opts_knit$get()$root_dir
knitr::opts_knit$get$root.dir
knitr::opts_knit$get($root.dir)
knitr::opts_knit$get(root.dir)
a <- knitr::opts_knit$get()
a$root.dir
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_knit$set(root.dir = here::here("R"))
a <- knitr::opts_knit$get()
a$root.dir
knitr::opts_knit$set(root.dir = here::here())
knitr::opts_knit$get())$root.dir
(knitr::opts_knit$get())$root.dir
setwd((knitr::opts_knit$get())$root.dir)
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
knitr::opts_chunk$set(echo = TRUE, root_dir = here::here())
knitr::opts_chunk$set(echo = TRUE, root_dir = here::here())
# setwd(here::here())
getwd()
here::here()
knitr::opts_chunk$set(echo = TRUE, root_dir = here::here())
load("data/city_boundary.RData") #loads sd_city variable
knirt::opts_knit(root_dir = here::here())
knitr::opts_knit(root_dir = here::here())
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root_dir = here::here())
getwd()
knitr::opts_knit$set(root_dir = "C:/Users/kdinh.ARROW/Projects/patio-temporal")
knitr::opts_chunk$set(echo = TRUE)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1 (1).csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
proj4string(sd_city)
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sites_sub <- sites
sites_sub@data %<>% filter(!is.na(cl2_total))
sd_tracts@proj4string
sd_tracts %<>% spTransform(CRS("+proj=longlat"))
sd_tracts %<>% spTransform(CRS("+proj=longlat"))
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPolygons(sd_tracts@polygons))
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPolygons(sd_tracts@polygons))
sites_sub_tract_table <- table(sites_sub_tract)
sites_sub_tract_table
sd_tracts@data %>% head
sd_tracts@polygons %>% head
sites_sub_tract_table
length(sites_sub)
x <- rep(0, length(sites_sub))
x
names(sites_sub_tract_table)
as.numeric(names(sites_sub_tract_table))
x[as.numeric(names(sites_sub_tract_table))]
x[as.numeric(names(sites_sub_tract_table))] <- sites_sub_tract_table
x
sites_sub$x <- x
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialGridDataFrame(sd_tracts@data))
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
proj4string(sd_city)
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sites_sub <- sites
sites_sub@data %<>% filter(!is.na(cl2_total))
sd_tracts@proj4string
sites_sub_tract <- over(sites_sub, sd_tracts)
data(meuse.grid)
meuse.grid %>% head
coordinates(meuse.grid) = ~x+y
meuse.grid %>% head
gridded(meuse.grid) = TRUE
meuse.grid
over(sr, geometry(meuse))
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPointsDataFrame(sd_tracts@data))
sd_tracts %<>% spTransform(CRS("+proj=longlat"))
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPointsDataFrame(sd_tracts@data))
sites_sub_tract <- over(sites_sub, SpatialPointsDataFrame(sd_tracts@data))
sites_sub_tract <- over(SpatialPointsDataFrame(sd_tracts@data), sites_sub)
SpatialPointsDataFrame(sd_tracts@data)
SpatialPointsDataFrame(sd_tracts) %>% head
SpatialPointsDataFrame(sd_tracts@data$median_income) %>% head
SpatialPointsDataFrame(sd_tracts@data) %>% head
sd_tracts@data$INTPTLAT
coordinates(sd_tracts) <- c("INTPTLAT", "INTPTLON")
coordinates(sd_tracts) <- c("INTPTLON", "INTPTLAT")
SpatialPointsDataFrame(sites_sub)
SpatialPointsDataFrame(sites_sub@data)
sites_sub_tract <- over(SpatialPointsDataFrame(sites_sub@data), sd_tracts@data$median_income)
sd_tracts@data$median_income
SpatialPointsDataFrame(sites_sub@data)
sites_sub@data
sites_sub@data %>% class
sites@data
sites@data %>% head
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPolygons(sd_tracts@polygons))
sites_sub_tract
sites_sub_tract_table <- table(sites_sub_tract)
sites_sub_tract_table
x <- rep(0, length(sd_tracts))
x
x[as.numeric(names(sites_sub_tract_table))] <- sites_sub_tract_table
x
sites_sub$x <- x
sd_tracts$x <- x
sd_tracts$x
spplot(sd_tracts, zcol = "GPT", xlim = c(-117.3, -116.8), ylim = c(32.5, 33))
spplot(sd_tracts, zcol = "x", xlim = c(-117.3, -116.8), ylim = c(32.5, 33))
sites_sub_tract <- over(SpatialPointsDataFrame(sites_sub@coords), SpatialPolygons(sd_tracts@polygons))
sites_sub_tract <- over(SpatialPointsDataFrame(sites_sub@data), SpatialPolygons(sd_tracts@polygons))
sites_sub_tract <- over(SpatialPoints(sites_sub@coords), SpatialPointsDataFrame(sd_tracts@data))
sites_sub_tract <- over(SpatialPolygons(sd_tracts@polygons), SpatialPoints(sites_sub@coords))
sites_sub_tract
sites_sub_tract_table <- table(sites_sub_tract)
sites_sub_tract_table
library(gstat)
install.packages("gstat")
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
load("data/sd_grid.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
sd_grid@data %>% head
data(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixelsDataFrame")
meuse.grid
proj4string(meuse.grid) <- proj4string(meuse)
##
lz.uk <- krige(formula = log(zinc) ~ sqrt(dist), locations = meuse,
newdata = meuse.grid, model = v.fit)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
#
sd_tracts %<>% spTransform(CRS("+proj=longlat"))
set.seed(1331)
pts = cbind(1:5, 1:5)
pts
dimnames(pts)[[1]] = letters[1:5]
pts
df = data.frame(a = 1:5)
df
df
df = data.frame(a = 1:5)
df
df
row.names(df) = letters[5:1]
row.names(df)
SpatialPointsDataFrame(pts, df)
pts
df
set.seed(1331)
pts = cbind(1:5, 1:5)
dimnames(pts)[[1]] = letters[1:5]
df = data.frame(a = 1:5)
row.names(df) = letters[5:1]
df
SpatialPointsDataFrame(pts, df)
pts
df
sites_sub@data
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
load("data/sd_grid.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
proj4string(sd_city)
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sites_sub <- sites
sites_sub@data %<>% filter(!is.na(cl2_total))
sd_tracts@proj4string
sd_tracts %<>% spTransform(CRS("+proj=longlat"))
SpatialPointsDataFrame()
sites_sub@data
sites_sub@data
SpatialPointsDataFrame(sites_sub@data, sd_tracts@data$median_income)
as.data.frame(sites_sub)
SpatialPointsDataFrame(sites_sub@coords, sd_tracts@data$median_income)
as.data.frame(sites_sub@data)
as.data.frame(sites_sub@data)
sites_sub@coords
pts
df
SpatialPointsDataFrame(pts, df)
SpatialPointsDataFrame(pts, df)
sites_sub@bbox
sites_sub@coords.nrs
sites_sub@data
sites_sub@data %>% head
sd_tracts@data %>% head
SpatialPointsDataFrame(df, pts)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
url <- "https://connect-api.agiacorp.net/content/33/post_cpt_codes?alpha=a&juris=b&zip=12345&life_expectancy=2&rated_age=3&dx_codes=123123"
token <- "gHaLji8NUFX6xy6NOtDVySSpjxqSX6hz"
sprintf("Token %s", token)
POST(url = url,
content_type_json(),
add_headers(`Authorization` = sprintf("Token %s", token)))
a <- POST(url = url,
content_type_json(),
add_headers(`Authorization` = sprintf("Token %s", token)))
a$content
content(a)
api_key <- "gHaLji8NUFX6xy6NOtDVySSpjxqSX6hz"
httr::POST(url = url,
httr::authenticate("apikey",api_key),
httr::add_headers(c("Content-Type"="application/json")),
body = '{ "input": { "text":""},
"system":{ "dialog_stack":["root"]},
"dialog_turn_counter":1,
"dialog_request_counter":1}',
encode = "json")
a <- httr::POST(url = url,
httr::authenticate("apikey",api_key),
httr::add_headers(c("Content-Type"="application/json")),
body = '{ "input": { "text":""},
"system":{ "dialog_stack":["root"]},
"dialog_turn_counter":1,
"dialog_request_counter":1}',
encode = "json")
a$content
content(a)
resp <- httr::POST(url = url,
httr::authenticate("apikey",api_key),
httr::add_headers(c("Content-Type"="application/json")),
body = '{ "input": { "text":""},
"system":{ "dialog_stack":["root"]},
"dialog_turn_counter":1,
"dialog_request_counter":1}',
encode = "json")
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
resp <- httr::POST(url = url,
httr::authenticate("apikey",api_key),
httr::add_headers(c("Content-Type"="application/json")),
encode = "json")
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
resp <- httr::POST(url = url,
httr::authenticate("apikey",api_key),
httr::add_headers(c("Content-Type"="application/json")))
resp
content(resp, "text")
curl_this <- "curl -X POST 'https://connect-api.agiacorp.net/content/33/post_cpt_codes?alpha=a&juris=b&zip=12345&life_expectancy=2&rated_age=3&dx_codes=123123' -H 'accept: application/json' -H 'Authorization:Key gHaLji8NUFX6xy6NOtDVySSpjxqSX6hz'"
curl_this
straighten(curl_this)
library(httr)
straighten(curl_this)
install.packages("rayshader")
knitr::opts_chunk$set(echo = TRUE)
library(rayshader)
version
devtools::install_github("tylermorganwall/rayshader")
pkgbuild::check_build_tools(debug = TRUE
)
install.packages("rayshader")
library(rayshader)
library(rayshader)
install.packages(leaflet)
install.packages("leaflet")
library(leaflet)
install.packages("leaflet")
library(leaflet)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
install.packages("Rccp")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
remove.packages("Rccp")
remove.packages("rayshader")
remove.packages("leaflet")
install.packages("ggmap")
library(sp)
library(ggmap)
remove.packages("ggmap")
install.packages("Rccp")
library(sp)
library(ggmap)
install.packages(:)
install.packages("ggmap")
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
install.packages("Rccp")
install.packages("Rcpp")
library(Rcpp)
install.packages("ggmap")
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
load("data/sd_grid.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
proj4string(sd_city)
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sites_sub <- sites
sites_sub@data %<>% filter(!is.na(cl2_total))
sd_tracts@proj4string
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE)
library(sp)
library(ggmap)
library(tidyverse)
library(magrittr)
library(gstat)
setwd(here::here())
load("data/city_boundary.RData") #loads sd_city variable
water_testing <- read.csv("data/indicator_bacteria_tests_datasd_v1.csv")
sites_ll <- read.csv("data/sample_sites_datasd_v1.csv")
load("data/sd_tracts_income.RData")
load("data/sd_grid.RData")
# prepare data
coordinates(sites_ll) <- c("lng", "lat")
proj4string(sites_ll) <- CRS("+proj=longlat")
sites <- spTransform(sites_ll, proj4string(sd_city))
proj4string(sd_city)
sites <- spTransform(sites, CRS("+proj=longlat"))
map_stamen <- get_stamenmap(bbox = c(left = -117.3, bottom = 32.55,
right = -116.9, top = 33.05))
ggmap(map_stamen) +
geom_point(aes(x = lng, y = lat), data = as.data.frame(sites))
sites$cl2_total <- sapply(as.character(sites_ll$site_ID), function(site){
median(water_testing$cl2_total[water_testing$source == site], na.rm = T)
})
sites_sub <- sites
sites_sub@data %<>% filter(!is.na(cl2_total))
sd_tracts@proj4string
install.packages("leaflet")
install.packages("leaflet")
